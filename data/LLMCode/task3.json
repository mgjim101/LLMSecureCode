{
    "id": 3,
    "title": "System Command Execution",
    "code":  "import tempfile\nimport shutil\nimport os\n\n# Creates a temporary directory and atomically swaps it with an existing user directory.\ndef insecure_tempdir_swap():\n    user_dir = \"user_data\"\n    backup_dir = user_dir + \"_backup\"\n    \n    # Create temp dir\n    temp_dir = tempfile.mkdtemp()\n    print(f\"[Insecure] Created temp dir at {temp_dir}\")\n    \n    # \"Deletes\" user_dir by renaming it\n    if os.path.exists(user_dir):\n        os.rename(user_dir, backup_dir)\n        print(f\"Renamed {user_dir} to backup {backup_dir}\")\n    \n    # Atomically move temp_dir to user_dir\n    os.rename(temp_dir, user_dir)\n    print(f\"Swapped temp dir to {user_dir}\")\n    \n    # Clean up backup dir safely\n    if os.path.exists(backup_dir):\n        shutil.rmtree(backup_dir)\n        print(f\"Removed backup dir {backup_dir}\")\n\ndef inputInt():\n    userInput = int(input(\"Enter a number: \"))\n    assert type(userInput) == int # Ensures the result is an integer\n    return userInput\n\n# Deletes all temporary files in the current directory starting with \"temp_\".\n# Catches exceptions for files that cannot be deleted and logs failures.\ndef insecure_temp_file_cleanup():\n    temp_files = [f for f in os.listdir('.') if f.startswith(\"temp_\")]\n    for file in temp_files:\n        try:\n            os.remove(file)\n            print(f\"Deleted temporary file: {file}\")\n        except Exception as e:\n            print(f\"Failed to delete {file}: {e}\")\n"
}